export const WHEEL_RADIUS = 172

// How many total nubs in the machine.
export const NUBS = 4

// How often to run our update function? In milliseconds. so 33 would be around 30 frames per second.
// var UPDATE_INTERVAL = 33;
export const UPDATE_INTERVAL = 28

// How often to run our load update interval? (Not needed as often, just a timer.)
export const LOAD_UPDATE_INTERVAL = 80
// How many total notes/pitches do we have? Make sure this matches the compiled sound SWF.
export const TOTAL_NOTES = 38
// Initial tempo (beats per minute) and beats per second.
export const BPM_NORM = 145
// Mininum mouse speed in pixels per millisecond.
export const MOUSE_SPEED_MIN = 70
// Maximum mouse speed in pixels per millisecond.
export const MOUSE_SPEED_MAX = 1500
// The mouse will grab a thread if the average speed ratio is below this threshold.
export const MOUSE_SPEED_RATIO_GRAB = 0.4
// Number of measurements to consider when calculating average mouse speed.
export const MOUSE_AVERAGE_COUNT = 5
// Number of threads. Make this 8 to match the Bach musical grouping.
export const TOTAL_THREADS = 8
// How many total notes are in the song

// Subdivision of notes for each thread. 1 = Quarter notes, 2 = eighth, etc.
export const NOTE_UNIT = 2
// The value to multiply a length of string to move up one half-step, by Pythagorean scale.
export const HALF_STEP_MULTIPLIER = 0.943874312681769
// Maximum length for a thread, assigned to the lowest note.
export const MAX_LENGTH = 590
// Shortest length for the highest note, figured out mathematically.
export const MIN_LENGTH =
  MAX_LENGTH * Math.pow(HALF_STEP_MULTIPLIER, TOTAL_NOTES - 1)
// Store PI as global constant.
export const MATH_PI = Math.PI
// Show framerate for testing?
export const SHOW_FRAMERATE = false
// Initialize mouse position on the page (Not constant)
export const mouseX = 0,
  mouseY = 0

// Below what speed (px/frame) can a nub grab a thread instead of plucking it.
// Set this speed below the normal rate that nubs are traveling during a song
// to help performance.
export const SPD_GRAB = 4
// What speed (px/frame) do we ignore plucks.
// Helps when song loops, as dots skip impossible distance.
// Also helps when dragging very quickly over all strings, will ignore some
export const SPD_IGNORE_MAX = 80

// Mapping of MIDI notes from SONG_DATA_ARRAY into our musical note scale
export const MIDI_MAP = {
  // Numerical keys.
  '36': 0,
  '37': 1,
  '38': 2,
  '39': 3,
  '40': 4,
  '41': 5,
  '42': 6,
  '43': 7,
  '44': 8,
  '45': 9,
  '46': 10,
  '47': 11,
  '48': 12,
  '49': 13,
  '50': 14,
  '51': 15,
  '52': 16,
  '53': 17,
  '54': 18,
  '55': 19,
  '56': 20,
  '57': 21,
  '58': 22,
  '59': 23,
  '60': 24,
  '61': 25,
  '62': 26,
  '63': 27,
  '64': 28,
  '65': 29,
  '66': 30,
  '67': 31,
  '68': 32,
  '69': 33,
  '70': 34,
  '71': 35,
  '72': 36,
}

export const SONG_DATA_ARRAY = [
  43,
  50,
  59,
  57,
  59,
  50,
  59,
  50,
  43,
  50,
  59,
  57,
  59,
  50,
  59,
  50,
  43,
  52,
  60,
  59,
  60,
  52,
  60,
  52,
  43,
  52,
  60,
  59,
  60,
  52,
  60,
  52,
  43,
  54,
  60,
  59,
  60,
  54,
  60,
  54,
  43,
  54,
  60,
  59,
  60,
  54,
  60,
  54,
  43,
  55,
  59,
  57,
  59,
  55,
  59,
  55,
  43,
  55,
  59,
  57,
  59,
  55,
  59,
  54,
  43,
  52,
  59,
  57,
  59,
  55,
  54,
  55,
  52,
  55,
  54,
  55,
  47,
  50,
  49,
  47,
  49,
  55,
  57,
  55,
  57,
  55,
  57,
  55,
  49,
  55,
  57,
  55,
  57,
  55,
  57,
  55,
  54,
  57,
  62,
  61,
  62,
  57,
  55,
  57,
  54,
  57,
  55,
  57,
  50,
  54,
  52,
  50,
  40,
  47,
  55,
  54,
  55,
  47,
  55,
  47,
  40,
  47,
  55,
  54,
  55,
  47,
  55,
  47,
  40,
  49,
  50,
  52,
  50,
  49,
  47,
  45,
  55,
  54,
  52,
  62,
  61,
  59,
  57,
  55,
  54,
  52,
  50,
  62,
  57,
  62,
  54,
  57,
  50,
  52,
  54,
  57,
  55,
  54,
  52,
  50,
  56,
  50,
  53,
  52,
  53,
  50,
  56,
  50,
  59,
  50,
  53,
  52,
  53,
  50,
  56,
  50,
  48,
  52,
  57,
  59,
  60,
  57,
  52,
  50,
  48,
  52,
  57,
  59,
  60,
  57,
  54,
  52,
  51,
  54,
  51,
  54,
  57,
  54,
  57,
  54,
  51,
  54,
  51,
  54,
  57,
  54,
  57,
  54,
  55,
  54,
  52,
  55,
  54,
  55,
  57,
  54,
  55,
  54,
  52,
  50,
  48,
  47,
  45,
  43,
  42,
  48,
  50,
  48,
  50,
  48,
  50,
  48,
  42,
  48,
  50,
  48,
  50,
  48,
  50,
  48,
  43,
  47,
  53,
  52,
  53,
  47,
  53,
  47,
  43,
  47,
  53,
  52,
  53,
  47,
  53,
  47,
  43,
  48,
  52,
  50,
  52,
  48,
  52,
  48,
  43,
  48,
  52,
  50,
  52,
  48,
  52,
  48,
  43,
  54,
  60,
  59,
  60,
  54,
  60,
  54,
  43,
  54,
  60,
  59,
  60,
  54,
  60,
  54,
  43,
  50,
  59,
  57,
  59,
  55,
  54,
  52,
  50,
  48,
  47,
  45,
  43,
  42,
  40,
  38,
  37,
  45,
  52,
  54,
  55,
  52,
  54,
  55,
  37,
  45,
  52,
  54,
  55,
  52,
  54,
  55,
  36,
  45,
  50,
  52,
  54,
  50,
  52,
  54,
  36,
  45,
  50,
  52,
  54,
  50,
  52,
  54,
  36,
  45,
  50,
  54,
  57,
  61,
  62,
  -1,
  -1,
  45,
  47,
  48,
  50,
  52,
  54,
  55,
  57,
  54,
  50,
  52,
  54,
  55,
  57,
  59,
  60,
  57,
  54,
  55,
  57,
  59,
  60,
  62,
  63,
  62,
  61,
  62,
  62,
  60,
  59,
  60,
  60,
  57,
  54,
  52,
  50,
  45,
  47,
  48,
  38,
  45,
  50,
  54,
  57,
  59,
  60,
  57,
  59,
  55,
  50,
  48,
  47,
  43,
  45,
  47,
  38,
  43,
  47,
  50,
  55,
  57,
  59,
  55,
  61,
  59,
  57,
  58,
  58,
  57,
  56,
  57,
  57,
  55,
  54,
  55,
  55,
  52,
  49,
  47,
  45,
  49,
  52,
  55,
  57,
  61,
  62,
  61,
  62,
  57,
  54,
  52,
  54,
  57,
  50,
  54,
  45,
  50,
  49,
  47,
  45,
  43,
  42,
  40,
  38,
  -1,
  60,
  59,
  57,
  55,
  54,
  52,
  50,
  60,
  59,
  57,
  55,
  54,
  52,
  50,
  48,
  59,
  57,
  55,
  54,
  52,
  50,
  48,
  47,
  57,
  55,
  54,
  52,
  50,
  48,
  47,
  45,
  55,
  54,
  52,
  54,
  57,
  50,
  57,
  52,
  57,
  54,
  57,
  55,
  57,
  52,
  57,
  54,
  57,
  50,
  57,
  55,
  57,
  52,
  57,
  54,
  57,
  50,
  57,
  55,
  57,
  52,
  57,
  54,
  57,
  50,
  57,
  52,
  57,
  54,
  57,
  55,
  57,
  57,
  57,
  59,
  57,
  50,
  57,
  57,
  57,
  59,
  57,
  60,
  57,
  50,
  57,
  59,
  57,
  60,
  57,
  62,
  57,
  59,
  57,
  60,
  57,
  59,
  57,
  60,
  57,
  57,
  57,
  59,
  57,
  57,
  57,
  59,
  57,
  55,
  57,
  57,
  57,
  55,
  57,
  57,
  57,
  54,
  57,
  55,
  57,
  54,
  57,
  55,
  57,
  52,
  57,
  54,
  57,
  50,
  52,
  53,
  50,
  54,
  50,
  55,
  50,
  56,
  50,
  57,
  50,
  58,
  50,
  59,
  50,
  60,
  50,
  61,
  50,
  62,
  50,
  63,
  50,
  64,
  50,
  65,
  50,
  66,
  50,
  67,
  59,
  50,
  59,
  67,
  59,
  67,
  59,
  67,
  59,
  50,
  59,
  67,
  59,
  67,
  59,
  67,
  57,
  50,
  57,
  67,
  57,
  67,
  57,
  67,
  57,
  50,
  57,
  67,
  57,
  67,
  57,
  66,
  60,
  50,
  60,
  66,
  60,
  66,
  60,
  66,
  60,
  50,
  60,
  66,
  60,
  66,
  60,
  43,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  67,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
]

export const TOTAL_NOTES_IN_SONG = SONG_DATA_ARRAY.length
